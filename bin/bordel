#!/bin/bash

# Usage: usage <exit-code>
# Display the usage of this script.
usage() {
    echo "Usage: bordel [option] <command>"
    echo "Wrapper to build and deploy an OpenXT image."
    echo "  -h      display this help and exit."
    echo "  -i      id to identify build, default is YYMMDD."
    echo ""
    echo "Command list:"
    describe_cmds
    exit $1
}

# Start by getting relative location exporting them as script globals
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
REPO_DIR=$(cd $SCRIPT_DIR/..; pwd)
TOP="${REPO_DIR}"

# Source in common functions
. ${SCRIPT_DIR}/functions

# Source in all the command modules
register_cmds ${SCRIPT_DIR}/cmds

# Parse options.
while getopts ":i:h" opt; do
    case $opt in
        h)  usage 0 ;;
        i) BUILD_ID=${OPTARG} ;;
        :)  echo "Option \`${OPTARG}' is missing an argument." >&2
            usage 1
            ;;
        \?) echo "Unknown option \`${OPTARG}'." >&2
            usage 1
            ;;
    esac
done
shift $((${OPTIND} - 1))

if [ $# -lt 1 ]; then
    echo "No command specified." >&2
    usage 1
fi

# Sanitize input.
command="$1"
shift 1

BUILD_ID=${BUILD_ID:-$(date +"%y%m%d")}
BUILD_DIR="${TOP}/build-${BUILD_ID}"

if [ -e "${BUILD_DIR}/.putain" ]; then
    . "${BUILD_DIR}/.putain"
    CONFIGURED=true

    # OpenXT configuration.
    if [ -e "${CONF_DIR}/openxt.conf" ]; then
        . "${CONF_DIR}/openxt.conf"
    fi
else
    CONFIGURED=false
fi

CERTS_DIR=${CERTS_DIR:-"${REPO_DIR}/certs"}

if $(eval "${command}_need_conf") && ! $CONFIGURED; then
    echo "Did not find a configuration for Build ${BUILD_ID}, please run config command" >&2
    usage 1
fi

call_cmd ${command} $@
if [ $? -ne 0 ]; then
       usage 1
fi
