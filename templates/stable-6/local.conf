# CONF_VERSION is increased each time conf/ changes incompatibly
CONF_VERSION = "1"

#INHERIT += "rm_work"

# Which files do we want to parse:
BBMASK = ""

# What kind of images do we want?
IMAGE_FSTYPES_append = " tar.xz"

# Don't generate the mirror tarball for SCM repos, the snapshot is enough
BB_GENERATE_MIRROR_TARBALLS = "0"

#
# Parallelism Options
#
# These two options control how much parallelism BitBake should use.
# The first option determines how many tasks bitbake should run in parallel:
# Default to setting automatically based on cpu count
BB_NUMBER_THREADS ?= "${@oe.utils.cpu_count()}"
#
# The second option controls how many processes make should run in parallel
# when running compile tasks:
# Default to setting automatically based on cpu count
PARALLEL_MAKE ?= "-j ${@oe.utils.cpu_count()}"


#
# Shared-state files from other locations
#
# Shared state files are prebuilt cache data objects which can used to
# accelerate build time. This variable can be used to configure the system to
# search other mirror locations for these objects before it builds the data
# itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp.
# These would contain the sstate-cache results from previous builds (possibly
# from other machines). This variable works like fetcher MIRRORS/PREMIRRORS
# and points to the cache locations to check for the shared objects.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/ \n \
#file://.* file:///some/local/dir/sstate/"

#SSTATE_MIRRORS ?= "\
#file://.* http://dominion.thruhere.net/angstrom/sstate-mirror/ \n "

SSTATE_DUPWHITELIST += "${DEPLOY_DIR}/licences"

# enable PR service on build machine itself its good for a case when this is
# the only builder generating the feeds
#
PRSERV_HOST = "localhost:0"

# Common URL translations.
MIRRORS += " \
    http://code.coreboot.org/p/seabios/downloads/.*     https://www.seabios.org/downloads/ \n \
    http://www.seabios.org/downloads/.*                 https://www.seabios.org/downloads/ \n \
"

# TODO: This should not be in local.conf
#       Probably belongs to something equivalent to bitbake.conf (defines
#       KERNELORG_SOURCE, etc), but that one cannot be extended it seems.
XEN_VERSION="4.6.6"
XEN_SRC_URI="https://downloads.xenproject.org/release/xen/4.6.6/xen-4.6.6.tar.gz"
XEN_SRC_MD5SUM="698328dcac775c8ccef0da3167020b19"
XEN_SRC_SHA256SUM="fa0748f128b189ec3497470a95f53ea42bbe4d7b5622509bcd862877895842f8"

# TODO: This probably belongs to the xenclient-oe layer.
REPO_PROD_CACERT="${OPENXT_CERTS_DIR}/prod-cacert.pem"
REPO_DEV_CACERT="${OPENXT_CERTS_DIR}/dev-cacert.pem"
REPO_DEV_SIGNING_CERT="${OPENXT_CERTS_DIR}/dev-cacert.pem"
REPO_DEV_SIGNING_DEV="${OPENXT_CERTS_DIR}/dev-cakey.pem"

# If ENABLE_BINARY_LOCALE_GENERATION is set to "1", you can limit locales
# generated to the list provided by GLIBC_GENERATE_LOCALES. This is huge
# time-savior for developmental builds.
ENABLE_BINARY_LOCALE_GENERATION = "1"
# Specifies the list of GLIBC locales to generate to save some build time.
# http://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#var-GLIBC_GENERATE_LOCALES
GLIBC_GENERATE_LOCALES += " \
    de_DE.UTF-8 \
    en_US.UTF-8 \
    es_ES.UTF-8 \
    fr_FR.UTF-8 \
    ja_JP.UTF-8 \
    zh_CN.UTF-8 \
"

IMAGE_LINGUAS = "en-us"

### COMPLETE HACK, that should be in the distro config.
# Prefer openssl over libressl
PREFERRED_PROVIDER_openssl = "openssl"
PREFERRED_PROVIDER_openssl-native = "openssl-native"
PREFERRED_PROVIDER_libcrypto = "libcrypto"
PREFERRED_PROVIDER_libssl = "libssl"
PREFERRED_PROVIDER_openssl-conf = "openssl-conf"
PREFERRED_PROVIDER_nativesdk-openssl = "nativesdk-openssl"
PREFERRED_PROVIDER_nativesdk-openssl-conf = "nativesdk-openssl-conf"

PREFERRED_PROVIDER_console-tools = "console-tools"
PREFERRED_PROVIDER_virtual/libx11 = "libx11"

### XXX: Why is that not anywhere in the rpcgen class/.inc
STAGING_IDLDIR = "${STAGING_DATADIR}/idl"
export STAGING_IDLDIR

# Should be changed for remote feed.
XENCLIENT_PACKAGE_FEED_URI ?= "file:///storage/ipk"

require openxt.conf
# xenclient-feed-configs. It requires a bunch of things:
XENCLIENT_BUILD = "${OPENXT_BUILD_ID}"
XENCLIENT_BUILD_BRANCH = "${OPENXT_BUILD_BRANCH}"
XENCLIENT_RELEASE = "${OPENXT_RELEASE}"
XENCLIENT_VERSION = "${OPENXT_VERSION}"
include openxt-build-date.conf
XENCLIENT_BUILD_DATE = "${OPENXT_BUILD_DATE}"

#EXTRA_IMAGE_FEATURES += "debug-tweaks"

### XXX: This should be set in distro.conf
DISTRO_FEATURES_append += "selinux multiarch pam"

### XXX: This has nothing to do here either.
# vhd image format support 
# 100M - safe default, overwrite in the recipe
VHD_MAX_SIZE = "100"
IMAGE_CMD_ext3.vhd = "install -d ${DEPLOY_DIR_IMAGE}/tmp.vhd ; genext2fs -b ${ROOTFS_SIZE} -d ${IMAGE_ROOTFS} ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3 ${EXTRA_IMAGECMD}; tune2fs -j ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3; vhd convert ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3 ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3.vhd ${VHD_MAX_SIZE}; rm -f ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3; mv ${DEPLOY_DIR_IMAGE}/tmp.vhd/${IMAGE_NAME}.rootfs.ext3.vhd ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.ext3.vhd"
IMAGE_DEPENDS_ext3.vhd = "hs-vhd-native genext2fs-native e2fsprogs-native"

# raw image - simply copy rootfs tree to deploy directory
IMAGE_CMD_raw = "cp -a ${IMAGE_ROOTFS} ${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.raw"

IMAGE_CMD_xc.ext3 = "( set -x; \
	${IMAGE_CMD_ext3}; \
	I0=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.ext3; \
	I=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.xc.ext3; \
	mv $I0 $I; \
	tune2fs -c -1 -i 0 $I; \
	e2fsck -f -y $I || true)"
IMAGE_DEPENDS_xc.ext3 = "e2fsprogs-native"

# sadly the vhd stack in XC doesn't seem to [yet] understand libbudgetvhd's vhds
# take rootfs size in KB, convert to bytes for truncate size, convert to MB
# and deal with bash rounding. If odd after rounding, add 1, if even, add 2 since we lost
# some precision; vhd size must also be a multiple of 2 MB.
IMAGE_CMD_xc.ext3.vhd = "( set -x; \
	${IMAGE_CMD_ext3}; \
	I0=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.ext3; \
	I=${DEPLOY_DIR_IMAGE}/${IMAGE_NAME}.rootfs.xc.ext3.vhd; \
	TGT_VHD_SIZE=`expr ${ROOTFS_SIZE} / 1024`; \
	if [ `expr ${TGT_VHD_SIZE} % 2` -eq 1 ]; \
		then TGT_VHD_SIZE=`expr ${TGT_VHD_SIZE} + 1`; \
	else TGT_VHD_SIZE=`expr ${TGT_VHD_SIZE} + 2`; \
	fi; \
	tune2fs -c -1 -i 0 $I0; \
	e2fsck -f -y $I0 || true ; \
	vhd convert $I0 $I ${TGT_VHD_SIZE} ; \
	rm -f $I0  )"
IMAGE_DEPENDS_xc.ext3.vhd = "hs-vhd-native e2fsprogs-native"

FILESYSTEM_PERMS_TABLES = "files/xc-fs-perms.txt"

# XXX: OCAML configuration, should be in the layer...
SYSROOT_OCAML_PATH = "${STAGING_DIR_NATIVE}${libdir_native}/${TRANSLATED_TARGET_ARCH}${TARGET_VENDOR}-${TARGET_OS}/ocaml"
export OCAML_STDLIBDIR = "${SYSROOT_OCAML_PATH}/site-lib"
OCAML_HEADERS = "${SYSROOT_OCAML_PATH}"
export ocamllibdir = "${libdir}/ocaml"
export STAGING_LIBDIR_OCAML = "${STAGING_LIBDIR}/ocaml"
OCAML_FINDLIB_CONF = "${STAGING_DIR_HOST}${sysconfdir}/findlib.conf"

# Old recipes use old mirrors.
MIRRORS =+ " \
    http://mirror.openxt.org/.*                         https://openxt.ainfosec.com/mirror/ \n \
    http://pypi.python.org/.*                           https://pypi.python.org/packages/source/p/python-daemon/ \n \
    http://code.coreboot.org/p/seabios/downloads/.*     https://www.seabios.org/downloads/ \n \
    http://www.seabios.org/downloads/.*                 https://www.seabios.org/downloads/ \n \
    git://anonscm.debian.org/collab-maint/ltrace.gitÂ    git://github.com/sparkleholic/ltrace.git \n \
"
