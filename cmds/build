#! /bin/bash

# Usage: build_describe
# Display description for this command wrapper.
build_describe() {
    echo "Build all the images of the OpenXT project using bitbake."
}

build_need_conf() { return 0; }

# Usage: build [mode]
# Build all the images of the OpenXT project using bitbake using the
# build-manifest file in CONF_DIR.
# modes:
#   clean: Run "cleanall" on the image recipe before building it.
build_main() {
    local mode=$1
    local maybe_clean=""

    pushd "${TOP}/${BUILD_DIR}" >/dev/null

    # Source build_env to get access to necessary OE variables.
    # shellcheck disable=SC1090
    . "${TOP}/${BUILD_DIR}/build_env"

    # Overwrite the build timestamp.
    echo "OPENXT_BUILD_DATE=\"$(date '+%T %D')\"" > "${CONF_DIR}/openxt-build-date.conf"

    if [ "${mode}" = "clean" ]; then
        # leading space to pretty print in error message below.
        maybe_clean=" -c cleanall"
    fi

    if ! grep -q bitbake "${CONF_DIR}/build-manifest" ; then
        cat >&2 << EOF
build-manifest format change to require full bitbake commands
e.g. MACHINE=xenclient-dom0 bitbake xenclient-dom0-image
Either re-run \`bordel config\` or manually update ${CONF_DIR}/build-manifest
with something like \`sed 's/\([^ ]*\) \(.*\)/\2 bitbake \1/'\` to build.
EOF
        return 1
    fi

    while read -r l ; do
        if [ -z "${l%%#*}" ]; then
            continue
        fi

        # No quotes so this expands out the line and runs it as a command
        #  e.g. MACHINE=xenclient-dom0 bitbake xenclient-dom0-image
        # shellcheck disable=SC2086
        if ! env $l $maybe_clean ; then
            echo "build-manifest command \"$l$maybe_clean\" failed." >&2
            return 1
        fi

    done < "${CONF_DIR}/build-manifest"

    popd >/dev/null
}
