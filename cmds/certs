#! /bin/bash

# Usage: certs_describe
# Display description for this command wrapper.
certs_describe() {
    echo "Create self-signed test certificates for OpenXT or linked existing ones."
}

certs_need_conf() { return 1; }

certs_usage() {
    cat - <<EOF
Usage: certs COMMAND
Commands:
    help            Display this usage.
    create [TYPE]   Generate the certificates for a given type.
                    TYPE can be "repo", "modules", "all".
                    "repo" creates self-signed test certficates to sign the OpenXT ugprade repositories in:
                        $(pwd)/${CERTS_DIR}
                    "modules" creates a self-signed test certificate to sign the modules used by OpenXT kernels in:
                        $(pwd)/${CERTS_DIR}
                    "all" will create both "repo" and "modules" certificates.
    use PATH        Create a symlink in the build tree to the directory PATH containing existing certificates to use.
EOF
}

# Usage: certs_create_selfsigned CONF CERT-OUT KEY-OUT [CN]
certs_create_selfsigned() {
    local x509_conf="$1"
    local cert_out="$2"
    local key_out="$3"
    local cn="${4:-Autogenerated test-signing certificate}"

    # Generate a default configuration if one does not exist.
    if [ ! -f "${x509_conf}" ]; then
        cat - > "${x509_conf}" <<EOF
[ req ]
default_bits = 4096
default_md = sha384
prompt = no
distinguished_name = req_distinguished_name
string_mask = utf8only
x509_extensions = x509_exts

[ req_distinguished_name ]
CN = ${cn}

[ x509_exts ]
basicConstraints = critical,CA:FALSE
keyUsage = digitalSignature
EOF
    fi
    openssl req -new -nodes -days 1095 -batch -x509 \
        -config "${x509_conf}" -outform PEM \
        -out "${cert_out}" \
        -keyout "${key_out}"
}

# Usage: certs_create [type]
certs_create() {
    local type="${1:-all}"

    mkdir -p "${CERTS_DIR}"

    case "${type}" in
        "repo")
            certs_create_selfsigned "${CERTS_DIR}/x509-repo-prod.genkey" \
                "${CERTS_DIR}/dev-cacert.pem" "${CERTS_DIR}/dev-cakey.pem" \
                "Autogenerated DEV repository test-signing certificate"
            certs_create_selfsigned "${CERTS_DIR}/x509-repo-dev.genkey" \
                "${CERTS_DIR}/prod-cacert.pem" "${CERTS_DIR}/prod-cakey.pem" \
                "Autogenerated PROD repository test-signing certificate"
            ;;
        "modules")
            certs_create_selfsigned "${CERTS_DIR}/x509-modules.genkey" \
                "${CERTS_DIR}/kernel_cert.pem" "${CERTS_DIR}/kernel_key.pem" \
                "Autogenerated OpenXT kernels test-signing certificate"
            ;;
        "all")
            certs_create_selfsigned "${CERTS_DIR}/x509-repo-prod.genkey" \
                "${CERTS_DIR}/dev-cacert.pem" "${CERTS_DIR}/dev-cakey.pem" \
                "Autogenerated DEV repository test-signing certificate" 
            certs_create_selfsigned "${CERTS_DIR}/x509-repo-dev.genkey" \
                "${CERTS_DIR}/prod-cacert.pem" "${CERTS_DIR}/prod-cakey.pem" \
                "Autogenerated PROD repository test-signing certificate"
            certs_create_selfsigned "${CERTS_DIR}/x509-modules.genkey" \
                "${CERTS_DIR}/kernel_cert.pem" "${CERTS_DIR}/kernel_key.pem" \
                "Autogenerated OpenXT kernels test-signing certificate"
            ;;
        *)
            echo "Unknown \`create' type: \`${type}'." >&2
            return 1
            ;;
    esac
}

# Usage: certs_use PATH
certs_use() {
    local path="$1"

    # 
    if [ ! -d "${path}" ]; then
        echo "\`${path}' does not exist." >&2
        certs_usage
        return 1
    fi

    # Certificates are already setup for this tree.
    if [ -L "${CERTS_DIR}" ]; then
        cat - >&2 <<EOF
Certificates are already linked to: $(readlink "${CERTS_DIR}").
If they are no longer required, remove the symlink to ${CERTS_DIR} before running this script.
Aborting.
EOF
        return 1
    fi
    # Certificates have already been generated in this tree.
    if [ -d "${CERTS_DIR}" ] && \
       [ -f "${CERTS_DIR}/prod-cacert.pem" ] || \
       [ -f "${CERTS_DIR}/prod-cakey.pem" ] || \
       [ -f "${CERTS_DIR}/dev-cacert.pem" ] || \
       [ -f "${CERTS_DIR}/dev-cakey.pem" ] || \
       [ -f "${CERTS_DIR}/kernel_key.pem" ] || \
       [ -f "${CERTS_DIR}/kernel_cert.pem" ]; then
        cat - >&2 <<EOF
Certificates already exist in: ${CERTS_DIR}.
If they are no longer required, remove the ${CERTS_DIR} directory before running this script.
Aborting.
EOF
        return 1
    fi
    # Point to the given certs.
    if [ -d "${path}" ] && \
       [ -f "${path}/prod-cacert.pem" ] || \
       [ -f "${path}/prod-cakey.pem" ] || \
       [ -f "${path}/dev-cacert.pem" ] || \
       [ -f "${path}/dev-cakey.pem" ] || \
       [ -f "${path}/kernel_key.pem" ] || \
       [ -f "${path}/kernel_cert.pem" ]; then
        ln -sf "${path}" "${CERTS_DIR}"
    else
        cat - >&2 <<EOF
Missing expected certificates in in \`${path}'.
This script expects:
- ${path}/prod-cacert.pem
- ${path}/prod-cakey.pem
- ${path}/dev-cacert.pem
- ${path}/dev-cakey.pem
- ${path}/kernel_key.pem
- ${path}/kernel_cert.pem
Aborting.
EOF
        return 1
    fi
}

# Usage: certs COMMAND...
certs_main() {
    if [ "$#" -lt 1 ]; then
        certs_usage
        return 1
    fi

    local cmd="$1"
    shift 1
    case "${cmd}" in
        "help")
            certs_usage
            return 0
            ;;
        "create")
            certs_create "$@"
            ;;
        "use")
            certs_use "$@"
            ;;
        *)
            echo "Unknown command: \`${cmd}'." >&2
            certs_usage
            return 1
            ;;
    esac
}

# vim:ts=4:sw=4:sts=4:et
