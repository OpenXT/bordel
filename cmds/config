#!/bin/bash

config_generate_dir() {
    local sstate_dir="${1}"

    mkdir -p "${TOP}/${BUILD_DIR}/${CONF_DIR}"

    pushd "${TOP}/${BUILD_DIR}" >/dev/null

    if [ -n "${sstate_dir}" ]; then
        if [ ! -e "${BASE_DIR}/${sstate_dir}" ]; then
            mkdir "${BASE_DIR}/${sstate_dir}"
        fi

        ln -sfr "${sstate_dir}" sstate-cache
    else
        if [ ! -e ${BASE_DIR}/sstate-cache ]; then
            mkdir ${BASE_DIR}/sstate-cache
        fi

        ln -sfr ${BASE_DIR}/sstate-cache
    fi

    for d in layers downloads ccache mirror ${CERTS_DIR}; do
        if [ ! -e "${BASE_DIR}/${d}" ]; then
            mkdir "${BASE_DIR}/${d}"
        fi

        ln -sfr "${BASE_DIR}/${d}"
    done

    popd >/dev/null
}

config_generate_auto() {
    local branch="${1}"
    local forced="${2}"
    local rmwork="${3}"
    local debug_tweaks="${4}"
    local permissive="${5}"
    local auto_conf="${TOP}/${BUILD_DIR}/${CONF_DIR}/auto.conf"

    if [ -e "${auto_conf}" ] && \
       [ "${forced}" != "true" ]; then
        return
    fi

    cat > "${auto_conf}" << EOF
#
# Auto-generated configuration
#
DL_DIR ?= "\${TOPDIR}/downloads"

SSTATE_DIR = "\${TOPDIR}/sstate-cache"

# Set DEPLOY_DIR outside of TMPDIR
DEPLOY_DIR = "\${TOPDIR}/${DEPLOY_DIR}"

export CCACHE_DIR = "\${TOPDIR}/ccache"
CCACHE_TARGET_DIR = "\${CACHE_DIR}"

DISTRO ?= "openxt-main"

OPENXT_MIRROR = "http://mirror.openxt.org"
OPENXT_GIT_MIRROR = "\${TOPDIR}/mirror"
OPENXT_GIT_PROTOCOL = "file"
OPENXT_BRANCH = "${branch}"
OPENXT_TAG = "${branch}"

OPENXT_BUILD_DATE ?= "$(date '+%T %D')"

# OpenXT: Where To get the signing certificates.
OPENXT_CERTS_DIR = "\${TOPDIR}/${CERTS_DIR}"
EOF

    if [ "${rmwork}" = "true" ]; then
        echo "INHERIT += \"rm_work\"" >> ${auto_conf}
    fi
    if [ "${debug_tweaks}" = "true" ]; then
        echo "EXTRA_IMAGE_FEATURES += \"debug-tweaks\"" >> ${auto_conf}
    fi
    if [ "${permissive}" = "true" ]; then
        echo "DEFAULT_ENFORCING = \"permissive\"" >> ${auto_conf}
    fi
}

config_copy_template() {
    local template="${1}"
    local file="${2}"
    local forced="${3}"
    local critical_files="bblayers.conf local.conf openxt.conf"

    if [ -e "${TOP}/${BUILD_DIR}/${CONF_DIR}/${file}" ] && \
       [ "${forced}" != "true" ]; then
        return
    fi

    if [ -z "${critical_files##*${file}*}" ]; then
        if [ ! -e "${BORDEL_DIR}/templates/${template}/${file}" ]; then
            echo "WARNING: no ${file} template, must manually setup ${file}!">&2
            return
        fi
    fi

    if [ -e "${BORDEL_DIR}/templates/${template}/${file}" ]; then
        cp "${BORDEL_DIR}/templates/${template}/${file}" "${TOP}/${BUILD_DIR}/${CONF_DIR}/${file}"
    fi
}

config_generate_env_file() {
    cat >"${TOP}/${BUILD_DIR}/build_env" <<EOF
#!/bin/bash

if [ "\$_" == "\$0" ]; then
    echo "This is supposed to be sourced, not executed"
    return 1
fi

BUILD_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

BBPATH="\${BUILD_DIR}/layers/bitbake/bin:"

BB_ENV_EXTRAWHITE="MACHINE DISTRO BUILD_UID LAYERS_DIR"
LAYERS_DIR="\${BUILD_DIR}/layers"
BUILDDIR="\${BUILD_DIR}"
PATH=\$BBPATH\$(echo "\$PATH" | sed -e "s|:\$BBPATH|:|g" -e "s|^\$BBPATH||")

unset BBPATH

bb32() {
    # ensure bitbake believes this is a 32bit arch
    linux32 bitbake "\$@"
}

cd "\${BUILDDIR}"
export BB_ENV_EXTRAWHITE LAYERS_DIR BUILDDIR PATH
EOF
}

config_usage() {
    cat - <<EOF
Deployment command:
  Options: [-h] [-t template-name] [-s shared-sstate-dir] [-b branch]
    -h: display this usage.
    -t: template name used for OE build config files temlate, default is the default
    -s: select an external sstate directory to use, default is per build_id sstate
    -b: branch to tag/use for the OpenXT repositories, default is build
    -D: Enable debug tweaks by passing "debug-tweaks" to OE EXTRA_IMAGE_FEATURES.
    -P: Switch SELinux to permissive by default in built images.
    --default: create the 'build' symlink to make this build directory the default one (see bordel -i).
    --force: overwrite any existing configuration if the build tree was already configured.
    --rmwork: inherit rm_work.bbclass, deleting temporary workspace.
    --no-repo-branch: do not create a named branch across OpenXT subproject repositories.
EOF
}

# This generates the conf, so can run without
config_need_conf() { return 1; }

config_main() {
    local template="master"
    local branch="build-${BUILD_ID}"
    local sstate_dir=""
    local default="false"
    local forced="false"
    local rmwork="false"
    local repo_branch="true"
    local debug_tweaks="false"
    local permissive="false"

    options=$(getopt -o t:s:b:hDP -l default,force,rmwork,no-repo-branch -- "$@")
    if [ $? -ne 0 ]; then
        config_usage
        exit 1
    fi
    eval set -- "$options"

    while true; do
        case "$1" in
        -t)
            shift; # The arg is next in position args
            template="${1}"
            ;;
        -s)
            shift; # The arg is next in position args
            sstate_dir="${1}"
            ;;
        -b)
            shift; # The arg is next in position args
            branch="${1}"
            ;;
        -h)
            config_usage
            exit 0
            ;;
        -D)
            debug_tweaks="true"
            ;;
        -P)
            permissive="true"
            ;;
        --default)
            default=true
            ;;
        --force)
            forced=true
            ;;
	--rmwork)
	    rmwork=true
	    ;;
        --no-repo-branch)
            repo_branch="false"
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done

    if [ -d "${TOP}/${BUILD_DIR}" -a "${forced}" != "true" ]; then
        echo "ERROR: existing build for ${BUILD_ID}, use --force to overwrite"
        exit 1
    fi

    pushd "${BASE_DIR}" > /dev/null
    ln -sf .repo/projects/openxt mirror
    popd > /dev/null 2>&1

    config_generate_dir "${sstate_dir}"
    if [ "${default}" == "true" ]; then
        ln -sfrT "${TOP}/${BUILD_DIR}" "${TOP}/build"
    fi

    for f in bblayers.conf local.conf openxt.conf build-manifest images-manifest; do
        if ! config_copy_template "${template}" "${f}" "${forced}"; then
            echo "ERROR: Failed to copy template file ${template}/${f} to ${CONF_DIR}."
            exit 1
        fi
    done
    config_generate_auto "${branch}" "${forced}" "${rmwork}" "${debug_tweaks}" "${permissive}"

    if [ "${repo_branch}" = "true" ]; then
        pushd "${BASE_DIR}" >/dev/null
        repo start "${branch}" openxt/*
        popd >/dev/null
    fi

    config_generate_env_file
}
