#!/bin/bash

docker_extra_opts() {
    local extra_opts=""
    if [ -n "${download_cache}" ]; then
        if [ ! -d "${download_cache}" ]; then
            echo "Invalid download cache: \"${download_cache}\"" >&2
            exit 1
        fi
        extra_opts="${extra_opts} \
            -v ${download_cache}:/home/${user}/openxt/downloads:rw"
    fi
    if [ -n "${certs_external}" ]; then
        if [ ! -d "${certs_external}" ]; then
            echo "Invalid external certificates: \"${certs_external}\"" >&2
            exit 1
        fi
        extra_opts="${extra_opts} \
            -v ${certs_external}:/home/${user}/openxt/certs:ro"
    fi
    echo "${extra_opts}"
}

docker_list() {
    ls -1 "$1"
}

docker_create() {
    local path=${1}
    local name=${2}
    local file=${3}

    if [ -z "${name}" ] || [ -z "${file}" ]; then
        echo "Error: empty parameter" >&2
        echo "create_container name Dockerfile" >&2
        return 1
    fi

    if [ ! -e "${path}/${file}" ]; then
        echo "No Dockerfile defined for ${file} found" >&2
        return 1
    fi

    docker build --force-rm --build-arg "UID=$(id -u)" --build-arg "GID=$(id -g)" \
        -t "${name}" -f "${path}/${file}" "${path}"
}

docker_enter() {
    local name=${1}
    local user=${2:-"build"}
    local opts
    opts=($(docker_extra_opts))

    if [ -z "${name}" ]; then
        echo "please provide a container to enter"
        return 1
    fi

    docker run --rm -it --security-opt seccomp=unconfined \
        -v "${TOP}:/home/${user}/openxt" \
        -v "${HOME}/.ssh:/home/${user}/.ssh" \
        -v "${HOME}/.gitconfig:/home/${user}/.gitconfig" \
        -v "${HOME}/.repoconfig:/home/${user}/.repoconfig" \
        -v "${HOME}/.repo_.gitconfig.json:/home/${user}/.repo_.gitconfig.json" \
        "${opts[@]}" \
        "${name}"
}

docker_build() {
    local name=${1}
    local user=${2:-"build"}
    local opts
    opts=($(docker_extra_opts))

    if [ -z "${name}" ]; then
        echo "please provide a container to enter"
        return 1
    fi

    docker run --rm -it \
        --security-opt seccomp=unconfined \
        -v "${TOP}:/home/${user}/openxt" \
        -v "${HOME}/.ssh:/home/${user}/.ssh" \
        -v "${HOME}/.gitconfig:/home/${user}/.gitconfig" \
        -v "${HOME}/.repoconfig:/home/${user}/.repoconfig" \
        -v "${HOME}/.repo_.gitconfig.json:/home/${user}/.repo_.gitconfig.json" \
        "${opts[@]}" \
        "${name}" "/home/${user}/openxt/openxt/bordel/bordel" "-i" "${BUILD_ID}" "build"
}

docker_deploy() {
    local name=${1}
    local type=${2}
    local user=${3:-"build"}

    if [ -z "${name}" ]; then
        echo "please provide a container to enter"
        return 1
    fi

    if [ -z "${type}" ]; then
        echo "please provide a deploy type"
        echo "see $0 deploy for more info"
        return 1
    fi

    docker run --rm -it \
        --security-opt seccomp=unconfined \
        -v "${TOP}:/home/${user}/openxt" \
        -v "${HOME}/.ssh:/home/${user}/.ssh" \
        -v "${HOME}/.gitconfig:/home/${user}/.gitconfig" \
        -v "${HOME}/.repoconfig:/home/${user}/.repoconfig" \
        -v "${HOME}/.repo_.gitconfig.json:/home/${user}/.repo_.gitconfig.json" \
        "${opts[@]}" \
        "${name}" "/home/${user}/openxt/openxt/bordel/bordel" "-i" "${BUILD_ID}" "deploy" "${type}"
}

# Usage: docker_usage
# Display usage for this command wrapper.
docker_usage() {
    echo "Docker command list:"
    echo "  list: List the Dockerfiles available"
    echo "  create {name} {file}: Creates Docker image as {name} using Dockerfile {file}" 
    echo "  enter {name} [user]: Enter an instance of {name} optionally as [user]"
    echo "  build {name} [user]: Run a build in an instance of {name} optionally as [user]"
    echo "  deploy {name} {type} [user]: Deploy build files for {type} in {name} optionally as [user]"
    echo "     * see $0 deploy for acceptable {type} values"
    echo "Options:"
    echo "  -d|--dl-cache: path to an existing download cache directory. This directory will be bound RW in the Docker container."
    echo "  -c|--certs: path to an existing certificate directory. This directory will be bound RO in the Docker container."
    exit "${1:-0}"
}

# While docker_build needs a conf item, need to be able to run create and enter before having a config
docker_need_conf() { return 1; }

docker_main() {
    local dockerfiles="${BORDEL_DIR}/Dockerfiles"
    local download_cache=""
    local certs_external=""
    local options

    command_sane "docker" "docker-ce"
    if [ ! $? ]; then
        return 1
    fi

    if ! docker info >/dev/null 2>&1; then
        echo "Not allowed to control docker, usually not a member of docker group" >&2
        return 1
    fi

    if ! options=$(getopt -o d:c:h -l dl-cache,certs -- "$@"); then
        docker_usage
        exit 1
    fi
    eval set -- "${options}"
    while true; do
        case "$1" in
            -d)
                shift
                download_cache=$(realpath "${1}")
                ;;
            -c)
                shift
                certs_external=$(realpath "${1}")
                ;;
            --)
                shift
                break
                ;;
        esac
        shift
    done

    cmd="$1"
    shift 1

    case "${cmd}" in
        "list") docker_list "${dockerfiles}" ;;
        "create") docker_create "${dockerfiles}" "$@" ;;
        "enter") docker_enter "$@" ;;
        "build") docker_build "$@" ;;
        "deploy") docker_deploy "$@" ;;
        "help") docker_usage 0 ;;
        *) echo "Unknown docker command \`${cmd}'." >&2
           docker_usage 1
           ;;
    esac
}
